#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <elf.h>

/**
 *print_magic - prints magic numbers
 *@e_ident: elf value
 */

void print_magic(unsigned char *e_ident)
{
	int a;

	printf("\tMagic:\t");
	for (a = 0; a < 16; a++)
	{
		printf(" %02x", e_ident[a]);
	}
}

/**
 *print_class - prints class
 *@e_ident: elf value
 */

void print_class(unsigned char *e_ident)
{
	printf("\tClass:\t\t\t");
	if (e_ident[EI_CLASS] == ELFCLASS64)
	{
		printf("ELF64\n");
	}
	else if (e_ident[EI_CLASS] == ELFCLASS32)
        {
		printf("ELF32\n");
	}
	else
	{
		printf("Invalid class\n");
	}
}

/**
 *print_data - prints data
 *@e_ident: elf value
 */

void print_data(unsigned char *e_ident)
{
	printf("\tData:\t\t\t");
	if (e_ident[EI_DATA] == ELFDATA2LSB)
	{
		printf("2\'s complement, little endian\n");
	}
	else if (e_ident[EI_DATA] == ELFDATA2MSB)
        {
		printf("2\'s complement, big endian\n");
	}
	else
	{
		printf("Invalid data encoding\n");
	}
}

/**
 *print_version - prints version
 *@e_ident: elf value
 */

void print_version(unsigned char *e_ident)
{
	printf("\tVersion:\t\t\t");
	printf("%d", e_ident[EI_VERSION]);
	if (e_ident[EI_VERSION] == EV_CURRENT)
	{
		printf(" (current)\n");
	}
}

/**
 *print_os - prints OS/OBI
 *@e_ident: elf value
 */

void print_os(unsigned char *e_ident)
{
	printf("\tOS/OBI:\t\t\t");
	if (e_ident[EI_OSABI] == ELFOSABI_SYSV)
	{
		printf("UNIX - System V\n");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_LINUX)
        {
		printf("UNIX - Linux\n");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_FREEBSD)
	{
		printf("UNIX - FreeBSD\n");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_HPUX)
	{
		printf("UNIX - HP-UX\n");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_NETBSD)
	{
		printf("UNIX - NetBSD\n");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_SOLARIS)
	{
		printf("UNIX - Solaris");
	}
	else if (e_ident[EI_OSABI] == ELFOSABI_IRIX)
	{
		printf("UNIX - IRIX");
	}
	else
	{
		printf("Invalid class\n");
	}
}

/**
 *print_type - prints type
 *@e_type: elf value
 */

void print_type(unsigned char *e_type)
{
	printf("\tType:\t\t\t\n");
	if (*e_type == ET_REL)
	{
		printf("Type: REL (Relocatable file");
	}
	else if (*e_type == ET_EXEC)
	{
		printf("Type: EXEC (Excutable file)");
	}
	else if (*e_type == ET_DYN)
	{
		printf("Type: DYN (Shared object)");
	}
	else if (*e_type == ET_CORE)
	{
		printf("Type: CORE (Core file)");
	}
	else
	{
		printf("Unknown Type");
	}
}

/**
 *print_entry - prints entry point of a file
 *@e_entry: elf value
 */

void print_entry(unsigned long e_entry)
{
	printf("\tEntry point address:\t\t\t0x%lx\n", e_entry);
}

/**
 *main - prints informations contained in an elf header
 *@argc: argument counter
 *@argv: argument vector
 */


int main(int argc, char *argv[])
{
	int fdes;
	Elf64_Ehdr head;

	if (argc != 2)
	{
	    dprintf(STDERR_FILENO, "Usage: elf_header elf_filename\n");
	    exit(98);
	}
	fdes = open(argv[1], O_RDONLY);
	if (fdes == -1)
	{
		dprintf(STDERR_FILENO, "Error opening header file");
		exit(98);
	}
	if (read(fdes, &head, sizeof(head)) != sizeof(head))
	{
		dprintf(STDERR_FILENO, "Failure to read this header");
		close(fdes);
		exit(98);
	}
    }

    print_e_ident(header.e_ident);

    close(fd);
    return 0;
}
